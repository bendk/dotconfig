#!/usr/bin/python3

from pathlib import Path
import argparse
import os
import shutil
import subprocess
import sys

class UserError(Exception):
    pass

CONFIG_DIR =  Path.home() / '.config/vim-pack'
CONFIG_PATH = CONFIG_DIR / 'config'
PACKAGE_ROOT = Path.home() / '.local/share/nvim/site/pack/vim-pack'
START_DIR = PACKAGE_ROOT / 'start'
OPT_DIR = PACKAGE_ROOT / 'opt'

class Package:
    """
    Represents a package to install
    """
    def __init__(self, source):
        self.source = source
        self.name = self.source.split('/')[-1]

    @classmethod
    def from_args(cls, source, args):
        return cls(
            source=source,
        )

    @classmethod
    def from_config_line(cls, line):
        return cls(
            source=line.strip(),
        )

    def repo_url(self):
        return 'https://github.com/{}'.format(self.source)

    def plugin_path(self):
        return START_DIR / self.name

    def is_present(self):
        return self.plugin_path().exists()

    def update_dir(self):
        if self.is_present():
            subprocess.check_call(['git', 'pull'], cwd=self.plugin_path())
        else:
            subprocess.check_call(['git', 'clone', self.repo_url(), self.plugin_path()])

    def remove_dir(self):
        shutil.rmtree(self.plugin_path())

    def to_config_line(self):
        return self.source

    def commit_id(self):
        return subprocess.check_output(['git', 'rev-parse', 'HEAD'], cwd=self.plugin_path()).decode('utf8').strip()

    def __eq__(self, other):
        return isinstance(other, Package) and self.name == other.name

    def __str__(self):
        if self.is_present():
            return '{:60} ({})'.format(self.source, self.commit_id())
        else:
            return '{:60} (not checked out)'.format(self.source)

class ConfigFile:
    """
    Manage our config file
    """
    def __init__(self):
        if CONFIG_PATH.exists():
            with open(CONFIG_PATH) as f:
                self.packages = [
                    Package.from_config_line(l)
                    for l in f
                    if l.strip()
                ]
        else:
            self.packages = []

    def add(self, package):
        if self.has_package(package):
            raise UserError('{} already added'.format(package))
        self.packages.append(package)
        self._write_out()

    def remove(self, package):
        if not self.has_package(package):
            raise UserError('{} not added')
        self.packages.remove(package)
        self._write_out()

    def has_package(self, package):
        return any(p.name == package.name for p in self)

    def _write_out(self):
        with open(CONFIG_PATH, 'w') as f:
            for p in self:
                f.write(p.to_config_line())
                f.write('\n')

    def __iter__(self):
        return iter(self.packages)

def ensure_dirs():
    os.makedirs(START_DIR, exist_ok=True)
    os.makedirs(OPT_DIR, exist_ok=True)
    os.makedirs(CONFIG_DIR, exist_ok=True)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.set_defaults(func=None)
    subparsers = parser.add_subparsers()

    parser_add = subparsers.add_parser('add')
    parser_add.add_argument('source', nargs='+')
    parser_add.set_defaults(func=handle_add)

    parser_delete = subparsers.add_parser('delete')
    parser_delete.add_argument('source', nargs='+')
    parser_delete.set_defaults(func=handle_delete)

    parser_status = subparsers.add_parser('status')
    parser_status.set_defaults(func=handle_status)

    parser_update = subparsers.add_parser('update')
    parser_update.set_defaults(func=handle_update)
    
    args = parser.parse_args()
    if args.func is None:
        parser.print_help()
    return args

def handle_add(config_file, args):
    for source in args.source:
        package = Package.from_args(source, args)
        config_file.add(package)
        package.update_dir()

def handle_delete(config_file, args):
    for source in args.source:
        package = Package.from_args(source, args)
        config_file.remove(package)
        package.remove_dir()

def handle_status(config_file, args):
    if config_file.packages:
        for package in config_file:
            print(package)
    else:
        print('No packages')

def handle_update(config_file, args):
    for package in config_file.packages:
        package.update_dir()

def repo_url(source):
    return 'https://github.com/{}'.format(args.source)

def plugin_path(args):
    START_DIR / args.source.split('/')[-1]

if __name__ == '__main__':
    args = parse_args()
    if args.func:
        ensure_dirs()
        try:
            args.func(ConfigFile(), args)
        except UserError as e:
            print(str(e), file=sys.stderr)
            sys.exit(1)

